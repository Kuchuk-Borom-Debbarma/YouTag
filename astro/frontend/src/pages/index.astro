---
import { getUserDetails } from "../services/UserService";

enum Status {
    TOKEN_NOT_FOUND = "TOKEN_NOT_FOUND",
    GETTING_USER_INFO = "GETTING_USER_INFO",
    USER_INFO_NOT_FOUND = "USER_INFO_NOT_FOUND",
    USER_FOUND = "USER_FOUND"
}

let status: Status;

// Log the current token value for debugging
const token = Astro.cookies.get("token");
console.log("Token from cookies:", token);

if (!token) {
    status = Status.TOKEN_NOT_FOUND;
    console.log("No token found in server cookie.");
} else {
    status = Status.GETTING_USER_INFO;
    console.log("Token found, getting user information...");

    // If token is present, proceed to validate the user
    const user = await getUserDetails(token.value);
    console.log("User fetch attempt result:", user);

    if (!user) {
        status = Status.USER_INFO_NOT_FOUND;
        console.log("User not found with the provided token.");
    } else {
        Astro.cookies.set("user-info", JSON.stringify(user), {maxAge: 60 * 60})
        status = Status.USER_FOUND;
        console.log("User found and saved to cookie:", user);
    }
}

// Log the final status
console.log("Current status:", status);

export const prerender = false;
---

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Authentication Status</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
            background-color: #f0f0f0;
        }
        .status-container {
            background-color: white;
            border-radius: 10px;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
            padding: 30px;
            text-align: center;
            max-width: 400px;
            width: 100%;
        }
        .status-icon {
            font-size: 64px;
            margin-bottom: 20px;
        }
        .status-message {
            font-size: 24px;
            margin-bottom: 15px;
            color: #333;
        }
        .status-submessage {
            font-size: 16px;
            color: #666;
            margin-bottom: 20px;
        }
        .btn {
            display: inline-block;
            padding: 10px 20px;
            background-color: #007bff;
            color: white;
            text-decoration: none;
            border-radius: 5px;
            transition: background-color 0.3s ease;
        }
        .btn:hover {
            background-color: #0056b3;
        }
        .token-not-found {
            background-color: #ffeeee;
        }
        .getting-user-info {
            background-color: #eef6ff;
        }
        .user-info-not-found {
            background-color: #fffaee;
        }
        .user-found {
            background-color: #eeffee;
        }
    </style>
</head>
<body>
<div id="status-container" class="status-container">
    {status === Status.TOKEN_NOT_FOUND && (
            <div class="token-not-found">
                <div class="status-icon">❗</div>
                <h1 class="status-message">Authentication Failed</h1>
                <p class="status-submessage">No authentication token found. Please log in.</p>
                <a href="/login" class="btn">Go to Login</a>
            </div>
    )}

    {status === Status.GETTING_USER_INFO && (
            <div class="getting-user-info">
                <div class="status-icon">⏳</div>
                <h1 class="status-message">Authenticating</h1>
                <p class="status-submessage">Fetching your user details...</p>
            </div>
    )}

    {status === Status.USER_INFO_NOT_FOUND && (
            <div class="user-info-not-found">
                <div class="status-icon">⚠️</div>
                <h1 class="status-message">Authentication Error</h1>
                <p class="status-submessage">Unable to retrieve user information.</p>
                <a href="/login" class="btn">Try Again</a>
            </div>
    )}

    {status === Status.USER_FOUND && (
            <div class="user-found">
                <div class="status-icon">✅</div>
                <h1 class="status-message">Authentication Successful</h1>
                <p class="status-submessage">Redirecting to your dashboard...</p>
            </div>
    )}
</div>

{status === Status.USER_FOUND && (
    <script is:inline>
        setTimeout(() => {
            window.location.href = '/home';
        }, 2000);
        </script>
)}
</body>
</html>